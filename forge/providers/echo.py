"""
Echo provider for testing.

Returns deterministic, spec-aware responses without external API calls.
Useful for testing the orchestrator pipeline and validation.
"""

from typing import Any, Dict, List

from .base import AIProvider


class EchoProvider(AIProvider):
    """
    Local echo provider for testing.

    Generates deterministic plan/apply responses based on user goal,
    extracting module references from prelude context.
    """

    def complete(self, messages: List[Dict[str, str]], **kwargs: Any) -> str:
        """
        Generate deterministic response based on messages.

        Args:
            messages: Message list (expects system prelude + user goal)
            **kwargs: Ignored for echo provider

        Returns:
            Formatted plan or response text
        """
        # Extract prelude (system message) and user goal
        system_content = ""
        user_goal = ""

        for msg in messages:
            if msg["role"] == "system":
                system_content = msg["content"]
            elif msg["role"] == "user":
                user_goal = msg["content"]

        # Extract module info from prelude
        modules = self._extract_modules_from_prelude(system_content)

        # Generate plan based on goal keywords
        return self._generate_plan(user_goal, modules)

    def _extract_modules_from_prelude(self, prelude: str) -> List[Dict[str, str]]:
        """
        Parse module information from prelude text.

        Args:
            prelude: System prelude content

        Returns:
            List of module dicts with id, title, objective
        """
        modules = []
        lines = prelude.split("\n")

        for line in lines:
            # Look for module headers like "### 1. Module Title (`module-id`)"
            if line.startswith("### ") and "`" in line:
                # Extract module ID from backticks
                parts = line.split("`")
                if len(parts) >= 2:
                    module_id = parts[1]
                    # Extract title (between number and backticks)
                    title_part = (
                        line.split(".")[1].split("`")[0].strip() if "." in line else "Module"
                    )
                    modules.append(
                        {
                            "id": module_id,
                            "title": title_part,
                            "objective": "See spec for details",
                        }
                    )

        return modules

    def _generate_plan(self, goal: str, modules: List[Dict[str, str]]) -> str:
        """
        Generate deterministic plan text.

        Args:
            goal: User's stated goal
            modules: Parsed module information

        Returns:
            Formatted plan text
        """
        lines = [
            "# AI Generation Plan (Echo Provider)",
            "",
            f"**Goal:** {goal}",
            "",
            "## Rationale",
            "",
            "This is a deterministic plan generated by the echo provider for testing.",
            "In production, a real AI provider would analyze the specs and generate",
            "a detailed, context-aware plan with specific implementation steps.",
            "",
            "## Proposed Steps",
            "",
        ]

        # Generate steps based on detected modules
        if modules:
            lines.append("1. **Review module specifications**")
            lines.append(f"   - Affected modules: {', '.join(m['id'] for m in modules[:3])}")
            lines.append("   - Verify objectives align with goal")
            lines.append("")

        lines.extend(
            [
                "2. **Generate/update deliverables**",
                "   - Create missing files per module specs",
                "   - Update existing content to match objectives",
                "   - Affected files: (determined at apply time)",
                "",
                "3. **Validate against policies**",
                "   - Check naming conventions",
                "   - Verify completeness",
                "   - Ensure instructor/student separation",
                "",
                "4. **Generate compliance report**",
                "   - Run policy engine",
                "   - Document any violations",
                "",
            ]
        )

        # Add policy warnings
        lines.extend(
            [
                "## Policy Risks",
                "",
                "- No spec modifications allowed (specs are source of truth)",
                "- All generated content must reference spec sources",
                "- Student AI policy must be respected in materials",
                "",
                "---",
                "",
                "*Generated by EchoProvider (test mode)*",
                "*Run `workshopforge ai apply` to execute this plan*",
            ]
        )

        return "\n".join(lines)

    def get_name(self) -> str:
        """Get provider name."""
        return "echo"
